import numpy as np

def revenue_efficiency_index(data, staff_hours = 5, operational_cost = 1000):
    # staff hours: time spent in maintainence of each room
    # oeprational cost: money spent in maintainence
    revenue = data['adr'] * data['stay_length']
    return revenue / (staff_hours * operational_cost)

def guest_satisfaction_yield(data, base_score = 70, cancel_penalty = 10, cost_to_serve = 500):
    # base score: average satisfaction score
    # cancel penalty: is stay was canceled, reduce the satisfaction of stay
    # cost to serve
    satisfaction = base_score + data['adr']/10 - data['is_canceled']*cancel_penalty
    return_rate = data['is_repeated_guest'].apply(lambda x: 0.3 if x == 1 else 0.1)
    return (satisfaction*return_rate)/cost_to_serve

def amenity_utilization_ratio(data, usage_factor = 0.8, capacity_factor = 1.5, revenue_factor = 0.2):
    # usage factor: average % of amenities used by a guest
    # capacity factor: max % of amenities a guest used
    # revenue factor: %age of revenue generated by amenities out of total revenue

    adr = data['adr'].clip(lower=0) # got some negative ratios, so setting min value of adr

    actual_usage = data['total_guests'] * data['stay_length'] * usage_factor
    max_capacity = data['total_guests'] * data['stay_length'] * capacity_factor
    revenue_contribution = adr * revenue_factor 

    with np.errstate(divide='ignore', invalid = 'ignore'):
        AUR = (actual_usage/max_capacity)*revenue_contribution
        AUR = AUR.fillna(0)
        AUR = np.clip(AUR, 0, 100) # got some very high values (~500-600) so setting a max cap

    return AUR

def loyalty_generation_score(data, base=100, marketing_cost = 400):
    #base: base cost of room, used to calculate premium (how much extra the guest paid above the base price)
    #using repeated guests to see loyalty, so for all guests who visited only once, get 0 score
    repeat = data['is_repeated_guest']
    premium = (data['adr'] - base).clip(lower = 0)
    return (repeat*data['stay_length']*premium)/marketing_cost

def operational_excellence_metric(data, staff_efficiency=0.9, industry_benchmark=100):
    #many assumed values to calculate this metric
    service_speed = data.apply(lambda row: 1 if(row['lead_time'] < 30 and row['is_canceled'] == 0) else 0.6, axis=1)
    quality_score = 70 + data['adr'].clip(lower=10)/10
    return (service_speed * quality_score * staff_efficiency) / industry_benchmark